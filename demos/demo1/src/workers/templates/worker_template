import json
import os
import sys
from typing import Dict, Any

# Task Information
# ID: {{ task_id }}
# Name: {{ task_name }}
# Documentation: {{ task_doc }}

# Task-specific code
{{task_source}}


def execute_task(inputs: Dict[str, Any]) -> Dict[str, Any]:
    """Execute the task with given inputs

    Args:
        inputs: Dictionary containing task input parameters
    Returns:
        Dictionary containing task results or error message
    """
    try:
        # Validate input schema if provided
        input_schema = {
            {% for key, type in input_schema.items() %}
        '{{ key }}': {{type.__name__}},
        {% endfor %}
        }

        for key, expected_type in input_schema.items():
            if key not in inputs:
                raise ValueError(f"Missing required input: {key}")

        result = {{task_name}}(**inputs)
        return {"status": "success", "result": result}
    except Exception as e:
        return {"status": "error", "result": str(e)}


if __name__ == "__main__":
    {% if executor_type == "docker" %}
    # Docker executor mode
    try:
        inputs = json.loads(os.environ.get("TASK_INPUTS", "{}"))
        result = execute_task(inputs)
        print(json.dumps(result))
    except json.JSONDecodeError:
        print(json.dumps({"status": "error", "result": "Invalid input JSON"}))
    {% else %}

    # Local executor mode
    def run_local(inputs: Dict[str, Any]) -> Dict[str, Any]:
        return execute_task(inputs)


    {% endif %}